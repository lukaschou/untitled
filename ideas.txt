- Idle / clicker game
- City builder
- Survival game
- Heist
- Time loop story / puzzle game
- Manage space fleet
- Celestial game
- Vending machine game

Fleet Management Game (Space freight company)
    - Proceduraly generate weighted graph of
        planets with different resources and civilizations
        and distances from each other
    - Take orders
    - Game loop:
        - Time / Resources
            - Orders that need to be filled in x days
            - Need to use resources to get resources and travel
            - Manipulate time (?)
                - Maybe implement time system later
        - Start with one ship and simple orders, can expand from there
            - Increase ships
                - Ships need crew, crew can have skills
                - Crew needs pay
                - Can hire people/aliens from other planets
                    - Later implement aura where some civilizations dont fw u
    - Balance getting resources w/ buying maybe crafting stuff to fulfill orders
    - Manage time to make / travel / order, multiple ships might have to be working
        to fulfill an order
    - Space pirates
    - Reputation system


FIRST TASKS
- Where you are
- Where you can travel to
- Be able to travel

- Generating some weighted graph
    - Start out pre-defined (not procedural)
    - Each node has a planet name
- Writing a shell-like utility

1) UI basics
- Letter about you inheriting the business or some origin story (TODO)
- Order log (see and choose available orders)
    - After choosing need to assign order / cargo to ship(s)
- 'map' command to see solar system

from 100km---------------a----------10km to
from 100km-------a-------------------10km to
from 100km---------------a----------10km to

Easy things to do early:
- Menu screen w/ start game
- On start game get player name / choose company name? Also should figure out how to enforce + prompt when some character limit is reached.
- After this, some sort of introduction w/ story + other notes

Galaxy Implementation:
- Use weighted graph to represent routes between planets. Hard code for now.
- Eventually we could procedurally generate this
	- How would we determine which planets have routes between them?
- We will need to come up with a strategy to realistically portray distances between each planet
	- For example if one planet close to another one and we know the distance to some third planet it will 
	be obvious if edge weights are randomly calculated if the weight is massively lower than that of relative routes
	- First probably popualte a matrix of some size and randomly populate planets within it. Then we can use these to calculate relative 
	distances planets are away from each other

====================================================================================================
Menu stuff
    - To start: Clear screen, display welcome text, provide numbered list of options
        - For now, only 1 option: Start game
        - If they give an invalid option, let them know and prompt again
    - Clear screen before while loop (this will be out "boot" func)
        - Game state starts as "menu"
            - This way users can go back to the menu if they wish
        - Menu state calls function that does the above (to start)
    - Future: Raw mode with cool graphic and choose options via arrow keys


Welcome to Space Freight

1. New Game
2. Load Game

Enter option: 

PLAYER =============================
1. Location - Different color on legend for "home planet"
2. Name
